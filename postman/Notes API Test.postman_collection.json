{
	"info": {
		"_postman_id": "415db085-fd55-4ca8-92c3-d7ab29647e77",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"   pm.response.to.have.status(201);",
							"})",
							"// response Content-Type header should have application/json value’.",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"// response body should be an object",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"}); ",
							"",
							"// response body should have the correct property and value",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"// response body data should have noteId property and not equal to empty’.",
							"pm.test('response body data should have noteId property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							" ",
							"    pm.expect(data).to.ownProperty('noteId');",
							"    pm.expect(data.noteId).to.not.equals('');",
							"",
							"    pm.environment.set('noteId', data.noteId);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"title\": \"Catatan A\",\n   \"tags\": [\"Android\", \"Web\"],\n   \"body\": \"Isi dari catatan A\"\n} ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding Notes with Bad Note Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {",
							"    pm.response.to.have.status(400);",
							"});",
							" ",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body object should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.haveOwnProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.haveOwnProperty('message');",
							"    pm.expect(responseJson.message).to.be.ok;",
							"})",
							"",
							"const repeatRequestUntilDatasetEmpty = () => {",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');",
							"    if(badNotePayloads && badNotePayloads.length > 0) {",
							"        postman.setNextRequest('Adding Notes with Bad Note Payload');",
							"    }",
							"}",
							"repeatRequestUntilDatasetEmpty()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array",
							" ",
							"if (!badNotePayloads || badNotePayloads.length === 0) {",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai",
							"    badNotePayloads = [",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }",
							"    ]",
							"}",
							" ",
							"let currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/notes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// test respom 200",
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"}); ",
							"",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"// Pastikan body response adalah object.",
							"pm.test('response body should an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"// Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.",
							"pm.test('response body should have the correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							"",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('data');",
							"   pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"// Pastikan data pada response body memiliki array notes dan terdapat minimal 1 item di dalamnya.",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data } = responseJson;",
							" ",
							"   pm.expect(data).to.have.ownProperty('notes');",
							"   pm.expect(data.notes).to.be.an('array');",
							"   pm.expect(data.notes).lengthOf.at.least(1);",
							"}); ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Pastikan response memiliki status code 200.",
							"pm.test('response status code should have 200 value', () => {",
							"  pm.response.to.have.status(200);",
							"}); ",
							"",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"// Pastikan body response merupakan object.",
							"pm.test('response body should be an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"// Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.",
							"pm.test('response body should have the correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							" ",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('data');",
							"   pm.expect(responseJson.data).to.be.an('object');",
							"}); ",
							"",
							"// Pastikan data pada response body memiliki properti note yang merupakan sebuah objek.",
							"pm.test('response body data should contain note object', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data } = responseJson;",
							" ",
							"   pm.expect(data).to.have.ownProperty('note');",
							"   pm.expect(data.note).to.be.an('object');",
							"}); ",
							"",
							"// Pastikan objek note di dalam data memiliki properti id, title, body, dan tags dengan nilai yang sesuai.",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
							"   const responseJson = pm.response.json();",
							"   const { data: { note } } = responseJson;",
							"   const expectedId = pm.environment.get('noteId');",
							"   const expectedTitle = 'Catatan A';",
							"   const expectedTags = ['Android', 'Web'];",
							"   const expectedBody = 'Isi dari catatan A';",
							"   pm.expect(note).to.have.ownProperty('id');",
							"   pm.expect(note.id).to.equals(expectedId);",
							"   pm.expect(note).to.have.ownProperty('title');",
							"   pm.expect(note.title).to.equals(expectedTitle);",
							"   pm.expect(note).to.have.ownProperty('tags');",
							"   pm.expect(note.tags).to.eql(expectedTags);",
							"   pm.expect(note).to.have.ownProperty('body');",
							"   pm.expect(note.body).to.equals(expectedBody);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// cek respon 200",
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Pastikan header response Content-Type memiliki nilai application/json.",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");",
							"}); ",
							"",
							"// Pastikan body response adalah object.",
							"pm.test('response body should be an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"// Pastikan body response memiliki properti dan nilai yang sesuai.",
							"pm.test('response body should have correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							" ",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('message');",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');",
							"});",
							"",
							"/*Ketika mengakses catatan yang diperbaharui",
							"**Pastikan catatan yang diperbarui memiliki nilai terbaru. ",
							"**/",
							"pm.test('when request the updated note', () => {",
							"    const noteId = pm.environment.get('noteId');",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {",
							"        if(!error) {",
							"            pm.test('then the updated note should contain the latest data', () => {",
							"                const responseJson = response.json();",
							"                const { data: { note } } = responseJson;",
							" ",
							"                const expectedTitle = 'Catatan A Revised';",
							"                const expectedTags = ['Android', 'Web'];",
							"                const expectedBody = 'Isi dari Catatan A Revised';",
							" ",
							"                pm.expect(note.title).to.equals(expectedTitle);",
							"                pm.expect(note.tags).to.eql(expectedTags);",
							"                pm.expect(note.body).to.equals(expectedBody);",
							"            });",
							"        }",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari Catatan A Revised\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note with Bad Note Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badNotePayloads = pm.environment.get('badNotePayloads');  // ini akan bertipe Array",
							" ",
							"if (!badNotePayloads || badNotePayloads.length === 0) {",
							"    // inisialisasi dengan sejumlah note yang tidak sesuai",
							"    badNotePayloads = [",
							"        { tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },",
							"        { title: 1, tags: [\"Android\", \"Web\"], body: \"Isi dari catatan A\" },",
							"        { title: \"Catatan A\", body: \"Isi dari catatan A\" },",
							"        { title: \"Catatan A\", tags: [1, \"2\"], body: \"Isi dari catatan A\" },",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"] },",
							"        { title: \"Catatan A\", tags: [\"Android\", \"Web\"], body: true }",
							"    ]",
							"}",
							" ",
							"const currentBadNotePayload = badNotePayloads.shift();  // hapus index 0, geser sisanya",
							"pm.environment.set('currentBadNotePayload', JSON.stringify(currentBadNotePayload));",
							"pm.environment.set('badNotePayloads', badNotePayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {",
							"    pm.response.to.have.status(400);",
							"});",
							" ",
							"pm.test('response Content-Type header should have application/json; charset=utf-8 value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body object should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.haveOwnProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.haveOwnProperty('message');",
							"    pm.expect(responseJson.message).to.be.ok;",
							"});",
							" ",
							"const repeatRequestUntilDatasetEmpty = () => {",
							"    const badNotePayloads = pm.environment.get('badNotePayloads');",
							" ",
							"    if(badNotePayloads && badNotePayloads.length > 0) {",
							"        postman.setNextRequest('Update Note with Bad Note Payload');",
							"    }",
							"}",
							" ",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadNotePayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Pastikan response memiliki status code 200.",
							"pm.test('response status code should have 200 value', () => {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Pastikan header response Content-Type memiliki nilai application/json.",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
							"}); ",
							"",
							"//3. Pastikan body response adalah object.",
							"pm.test('response body should be an object', () => {",
							"   const responseJson = pm.response.json();",
							"   pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"//4. Pastikan body response memiliki properti dan nilai yang sesuai.",
							"pm.test('response body should have correct property and value', () => {",
							"   const responseJson = pm.response.json();",
							" ",
							"   pm.expect(responseJson).to.have.ownProperty('status');",
							"   pm.expect(responseJson.status).to.equals('success');",
							"   pm.expect(responseJson).to.have.ownProperty('message');",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');",
							"}); ",
							"",
							"/*5. Ketika mengakses catatan yang dihapus",
							"**Pastikan catatan yang dihapus tidak ditemukan. ",
							"*/",
							"pm.test('when request the deleted note', () => {",
							"    const noteId = pm.environment.get('noteId');",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {",
							"        if(!error) {",
							"            pm.test('the deleted note should be not found', () => {",
							"                pm.expect(response.code).to.equals(404);",
							"                const responseJson = response.json();",
							"                pm.expect(responseJson.status).to.equals('fail');",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');",
							"            });",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"   pm.response.to.have.status(201);",
							"}); ",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('User berhasil ditambahkan');",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body data should have userId property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							" ",
							"    pm.expect(data).to.ownProperty('userId');",
							"    pm.expect(data.userId).to.not.equals('');",
							" ",
							"    pm.environment.set('currentUserId', data.userId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$timestamp}}-{{newUsername}}\",\n    \"password\": \"{{newPassword}}\",\n    \"fullname\": \"{{newFullName}}\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User with Exist Username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/* referensi: https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#sending-requests-from-scripts */",
							" ",
							"const postRequest = {",
							"    url: 'http://localhost:5000/users',",
							"    method: 'POST',",
							"    header: {",
							"    'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            username: 'testing',",
							"            password: pm.environment.get('newPassword'),",
							"            fullname: pm.environment.get('newFullname')",
							"        }),",
							"    },",
							"};",
							" ",
							"pm.sendRequest(postRequest, (error, response) => {",
							"    console.log(error ? error : response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {",
							"   pm.response.to.have.status(400);",
							"}); ",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Gagal menambahkan user. Username sudah digunakan.');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testing\",\n    \"password\": \"{{newPassword}}\",\n    \"fullname\": \"{{newFullName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding User with Bad User Payload",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let badUserPayloads = pm.environment.get('badUserPayloads');",
							" ",
							"if (!badUserPayloads || badUserPayloads.length === 0) {",
							"    badUserPayloads = [",
							"        { password: 'secret', fullname: 'John Doe' },",
							"        { username: 1, password: 'secret', fullname: 'John Doe' },",
							"        { username: 'johndoe', fullname: 'John Doe' },",
							"        { username: 'johndoe', password: true, fullname: 'John Doe' },",
							"        { username: 'johndoe', password: 'secret'},",
							"        { username: 'johndoe', password: 'secret', fullname: 0 },",
							"    ]",
							"}",
							" ",
							"const currentBadUserPayload = badUserPayloads.shift();",
							"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));",
							"pm.environment.set('badUserPayloads', badUserPayloads);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 400 value', () => {",
							"   pm.response.to.have.status(400);",
							"}); ",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.not.equals(' ');",
							"    pm.expect(responseJson.message).to.not.equals(null);",
							"});",
							" ",
							"const repeatRequestUntilDatasetEmpty = () => {",
							"    const badUserPayloads = pm.environment.get('badUserPayloads');",
							" ",
							"    if(badUserPayloads && badUserPayloads.length > 0) {",
							"        postman.setNextRequest('Adding User with Bad User Payload');",
							"    }",
							"}",
							" ",
							"repeatRequestUntilDatasetEmpty();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{currentBadUserPayload}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User by Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body data should contain user object', () => {",
							"    const { data } = pm.response.json();",
							" ",
							"    pm.expect(data).to.have.ownProperty('user');",
							"    pm.expect(data.user).to.be.an('object');",
							"});",
							" ",
							"pm.test('user object should contain only id, username, and fullname with correct value', () => {",
							"    const { data: { user } } = pm.response.json();",
							" ",
							"    pm.expect(user).to.have.ownProperty('id');",
							"    pm.expect(user.id).to.equals(pm.environment.get('currentUserId'));",
							"    pm.expect(user).to.have.ownProperty('username');",
							"    pm.expect(user.username).to.includes(pm.environment.get('newUsername'));",
							"    pm.expect(user).to.have.ownProperty('fullname');",
							"    pm.expect(user.fullname).to.equals(pm.environment.get('newFullname'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/users/{{currentUserId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"{{currentUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting User By Incorrect Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 404 value', () => {",
							"    pm.response.to.have.status(404);",
							"});",
							" ",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"}); ",
							" ",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							" ",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							" ",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('fail');",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('User tidak ditemukan');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/users/xxxx",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"users",
						"xxxx"
					]
				}
			},
			"response": []
		}
	]
}